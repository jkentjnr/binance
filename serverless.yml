service: crypto

provider:
  name: aws
  runtime: nodejs8.10
  region: ap-northeast-2
  stage: dev
  environment:
    FORCE_COLOR: 1
    SUPRESS_CONSOLE: 1
    S3_REGION: ap-northeast-2
    S3_BUCKET: crypto-bot
    S3_PATH: output
    DATABASE_HOST: crypto-data.cnngmdbklay6.ap-northeast-2.rds.amazonaws.com
    DATABASE_SCHEMA: backtester
    DATABASE_USER: sa
    DATABASE_PASSWORD: Ch!ef007
    
package:
  exclude:
    - .env
    - .vscode/**
    - src/**
    - bin/**

functions:
  executeBot:
    handler: lib/bot/lambda.executeHandler
    timeout: 28
    events:
      - http:
          path: execute
          method: POST
          cors: true
  validateRequest:
    handler: lib/lambda/validateRequest.handler
    timeout: 10
  recordRequestBegin:
    handler: lib/lambda/recordRequestBegin.handler
    timeout: 10
  evaluateRequest:
    handler: lib/lambda/evaluateRequest.handler
    timeout: 300
  executeTradeRequest:
    handler: lib/lambda/executeTradeRequest.handler
    timeout: 30
  recordResult:
    handler: lib/lambda/recordResult.handler
    timeout: 30
  handleResult:
    handler: lib/lambda/handleResult.handler
    timeout: 10

stepFunctions:
  stateMachines:
    executeScalar:
      name: executeScalar
      events:
        - http:
            path: executeScalar
            method: POST
            cors: true
      definition:
        Comment: Executes a single backtest
        StartAt: ValidateRequestStep
        States:
          ValidateRequestStep:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-validateRequest
            Next: DecisionValidateRequestStep
          DecisionValidateRequestStep:
            Type: Choice
            Choices:
             - Variable: "$.valid"
               BooleanEquals: false
               Next: HandleResultStep
            Default: RecordRequestBeginStep
          RecordRequestBeginStep:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-recordRequestBegin
            Next: EvaluateRequestStep
          EvaluateRequestStep:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-evaluateRequest
            Next: DecisionEvaluateRequestStep
          DecisionEvaluateRequestStep:
            Type: Choice
            Choices:
             - Variable: "$.dispatch"
               BooleanEquals: true
               Next: ExecuteTradeRequestStep
            Default: RecordResultStep
          ExecuteTradeRequestStep:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-executeTradeRequest
            Next: EvaluateRequestStep
          RecordResultStep:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-recordResult
            Next: HandleResultStep
          HandleResultStep:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-handleResult
            End: true

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters